---
# tasks file for generate k8s kubeconfig 
#

- name: Create directory for kubeconfig files
  file:
    path: /opt/kubernetes/{{ item.user }}
    state: directory
  when: item.action == 'create'
  with_items: "{{ user_to_cluster_role }}"
  
- name: Create directory for kubeconfig files
  file:
    path: /opt/kubernetes/{{ item.user }}
    state: directory
  when: item.action == 'create'
  with_items: "{{ user_to_role }}"

- name: Create directory for kubeconfig files
  file:
    path: /opt/kubernetes/{{ item.user }}
    state: directory
  when: item.action == 'create'
  with_items: "{{ k8s_rbac_cluster_role }}"

- name: Create directory for kubeconfig files
  file:
    path: /opt/kubernetes/{{ item.user }}
    state: directory
  when: item.action == 'create'
  with_items: "{{ k8s_rbac_role }}"

- name: Generate kubeconfig file for cluster role users
  shell: |
    token=$(kubectl get secret -n {{ item.namespace }} $(kubectl get sa {{ item.user }} -n {{ item.namespace }} -o jsonpath={.secrets[0].name}) -o jsonpath={.data.token} | base64 -d)
    kubectl get secret -n {{ item.namespace }} $(kubectl get sa {{ item.user }} -n {{ item.namespace }} -o jsonpath={.secrets[0].name}) -o jsonpath='{.data.ca\.crt}' | base64 -d > /opt/kubernetes/{{ item.user }}/{{ item.user }}-ca.crt
    cluster_name=`kubectl config get-contexts $(kubectl config current-context) | awk '{print $3}' | tail -n 1`
    endpoint=`kubectl config view -o jsonpath="{.clusters[?(@.name == \"${cluster_name}\")].cluster.server}"`
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config set-cluster ${cluster_name} --embed-certs=true --server=${endpoint} --certificate-authority=/opt/kubernetes/{{ item.user }}/{{ item.user }}-ca.crt
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config set-credentials {{ item.user }}-${cluster_name#cluser-} --token=${token}
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config set-context {{ item.user }}-${cluster_name#cluster-} --cluster=${cluster_name} --user={{ item.user }}-${cluster_name#cluster-}
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config use-context {{ item.user }}-${cluster_name#cluster-}
  when: item.action == 'create'
  with_items: "{{ user_to_cluster_role }}"

- name: Generate kubeconfig file for cluster role users
  shell: |
    token=$(kubectl get secret -n {{ item.namespace }} $(kubectl get sa {{ item.user }} -n {{ item.namespace }} -o jsonpath={.secrets[0].name}) -o jsonpath={.data.token} | base64 -d)
    kubectl get secret -n {{ item.namespace }} $(kubectl get sa {{ item.user }} -n {{ item.namespace }} -o jsonpath={.secrets[0].name}) -o jsonpath='{.data.ca\.crt}' | base64 -d > /opt/kubernetes/{{ item.user }}/{{ item.user }}-ca.crt
    cluster_name=`kubectl config get-contexts $(kubectl config current-context) | awk '{print $3}' | tail -n 1`
    endpoint=`kubectl config view -o jsonpath="{.clusters[?(@.name == \"${cluster_name}\")].cluster.server}"`
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config set-cluster ${cluster_name} --embed-certs=true --server=${endpoint} --certificate-authority=/opt/kubernetes/{{ item.user }}/{{ item.user }}-ca.crt
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config set-credentials {{ item.user }}-${cluster_name#cluser-} --token=${token}
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config set-context {{ item.user }}-${cluster_name#cluster-} --cluster=${cluster_name} --user={{ item.user }}-${cluster_name#cluster-}
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config use-context {{ item.user }}-${cluster_name#cluster-}
  when: item.action == 'create'
  with_items: "{{ k8s_rbac_cluster_role }}"

- name: Generate kubeconfig file for role users
  shell: |
    token=$(kubectl get secret -n {{ item.namespace }} $(kubectl get sa {{ item.user }} -n {{ item.namespace }} -o jsonpath={.secrets[0].name}) -o jsonpath={.data.token} | base64 -d)
    kubectl get secret -n {{ item.namespace }} $(kubectl get sa {{ item.user }} -n {{ item.namespace }} -o jsonpath={.secrets[0].name}) -o jsonpath='{.data.ca\.crt}' | base64 -d > /opt/kubernetes/{{ item.user }}/{{ item.user }}-ca.crt
    cluster_name=`kubectl config get-contexts $(kubectl config current-context) | awk '{print $3}' | tail -n 1`
    endpoint=`kubectl config view -o jsonpath="{.clusters[?(@.name == \"${cluster_name}\")].cluster.server}"`
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config set-cluster ${cluster_name} --embed-certs=true --server=${endpoint} --certificate-authority=/opt/kubernetes/{{ item.user }}/{{ item.user }}-ca.crt
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config set-credentials {{ item.user }}-${cluster_name#cluser-} --token=${token}
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config set-context {{ item.user }}-${cluster_name#cluster-} --cluster=${cluster_name} --user={{ item.user }}-${cluster_name#cluster-} --namespace={{ item.namespace }}
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config use-context {{ item.user }}-${cluster_name#cluster-}
  when: item.action == 'create'
  with_items: "{{ user_to_role }}"

- name: Generate kubeconfig file for custom role user
  shell: |
    token=$(kubectl get secret -n {{ item.namespace }} $(kubectl get sa {{ item.user }} -n {{ item.namespace }} -o jsonpath={.secrets[0].name}) -o jsonpath={.data.token} | base64 -d)
    kubectl get secret -n {{ item.namespace }} $(kubectl get sa {{ item.user }} -n {{ item.namespace }} -o jsonpath={.secrets[0].name}) -o jsonpath='{.data.ca\.crt}' | base64 -d > /opt/kubernetes/{{ item.user }}/{{ item.user }}-ca.crt
    cluster_name=`kubectl config get-contexts $(kubectl config current-context) | awk '{print $3}' | tail -n 1`
    endpoint=`kubectl config view -o jsonpath="{.clusters[?(@.name == \"${cluster_name}\")].cluster.server}"`
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config set-cluster ${cluster_name} --embed-certs=true --server=${endpoint} --certificate-authority=/opt/kubernetes/{{ item.user }}/{{ item.user }}-ca.crt
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config set-credentials {{ item.user }}-${cluster_name#cluser-} --token=${token}
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config set-context {{ item.user }}-${cluster_name#cluster-} --cluster=${cluster_name} --user={{ item.user }}-${cluster_name#cluster-} --namespace={{ item.namespace }}
    KUBECONFIG=/opt/kubernetes/{{ item.user }}/{{ item.user }}-config kubectl config use-context {{ item.user }}-${cluster_name#cluster-}
  when: item.action == 'create'
  with_items: "{{ k8s_rbac_role }}"
